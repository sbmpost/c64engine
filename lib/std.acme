!cpu 6510               ; for illegal opcodes
!convtab scr            ; for conversion to c64 screen codes

;-------------------------------------------------------------------------------
; far branches
;-------------------------------------------------------------------------------

!macro jcc .t {
    bcs * + 5
    jmp .t
}

!macro jcs .t {
    bcc * + 5
    jmp .t
}

!macro jeq .t {
    bne * + 5
    jmp .t
}

!macro jne .t {
    beq * + 5
    jmp .t
}

!macro jmi .t {
    bpl * + 5
	jmp .t
}

!macro jpl .t {
    bmi * + 5
	jmp .t
}

!macro jvc .t {
    bvs * + 5
	jmp .t
}

!macro jvs .t {
    bvc * + 5
	jmp .t
}

;-------------------------------------------------------------------------------
; convenience branch pseudo opcodes
;-------------------------------------------------------------------------------

;
; borrow
;

; branch if borrow clear
!macro bbc .l {
    bcs .l
}

; branch if borrow set
!macro bbs .l {
    bcc .l
}

; long branch if borrow clear
!macro jbc .l {
    bcc * + 5
    jmp .l
}

; long branch if borrow set
!macro jbs .l {
    bcs * + 5
    jmp .l
}

;
; unsigned
;

; branch if below
!macro bult .l {
    bcc .l
}

; branch if below or equal
!macro bule .l {
    beq .l
    bcc .l
}

; branch if above
!macro bugt .l {
    beq +
    bcs .l
+
}

; branch if above or equal
!macro buge .l {
    bcs .l
}

;
; signed
;

; branch if less
!macro bslt .l {
    bmi .l
}

; branch if less or equal
!macro bsle .l {
    beq .l
    bmi .l
}

; branch if greater
!macro bsgt .l {
    beq .l
    bpl .l
}

; branch if greater or equal
!macro bsge .l {
    bpl .l
}

;-------------------------------------------------------------------------------
; skip jumps
;-------------------------------------------------------------------------------

!macro bcc {
.checkmark
    bcc +
+
    !if >.checkmark != >* {
        !warn "page boundary crossed"
    }
}

!macro bcs {
.checkmark
    bcs +
+
    !if >.checkmark != >* {
        !warn "page boundary crossed"
    }
}

!macro beq {
.checkmark
    beq +
+
    !if >.checkmark != >* {
        !warn "page boundary crossed"
    }
}

!macro bne {
.checkmark
    bne +
+
    !if >.checkmark != >* {
        !warn "page boundary crossed"
    }
}

!macro bpl {
.checkmark
    bpl +
+
    !if >.checkmark != >* {
        !warn "page boundary crossed"
    }
}

!macro bmi {
.checkmark
    bmi +
+
    !if >.checkmark != >* {
        !warn "page boundary crossed"
    }
}

!macro bvc {
.checkmark
    bvc +
+
    !if >.checkmark != >* {
        !warn "page boundary crossed"
    }
}

!macro bvs {
.checkmark
    bvs +
+
    !if >.checkmark != >* {
        !warn "page boundary crossed"
    }
}

;-------------------------------------------------------------------------------

!macro create_basic_starter .line, .start {
    ; here begins basic
    *=$0801

    ; end address of basic programm
    !word .end - 1

    ; line number of the basic line
    !word .line

    ; sys
    !by $9e

    ; find leading decimal digit of .start
    !set .i = 10000
    !set .digit = 0
    !do while .digit = 0 {
        !set .digit = .start / .i
        !set .start = .start % .i
        !set .i = .i / 10
    }

    !by '0' + .digit

    ; now output the rest
    !do while .i != 0 {
        !by '0' + .start / .i
        !set .start = .start % .i
        !set .i = .i / 10
    }
.end
}

!macro create_basic_starter .start {
    +create_basic_starter 42, .start
}

;-------------------------------------------------------------------------------

VECTOR_NMI   = $fffa
VECTOR_RESET = $fffc
VECTOR_IRQ   = $fffe

!macro save_regs .label {
    !set .offset = 3
    sta .label + .offset + 1
    stx .label + .offset + 3
    sty .label + .offset + 5
}

!macro ack_restore_rti {
    inc VIC_IRQ_STATUS
    lda #0
    ldx #0
    ldy #0
    rti
}

!macro sprite_line .v {
    !by .v>>16, (.v>>8)&255, .v&255
}

!macro flip_byte .v {
    !by ((.v & 1) << 7) | ((.v & 2) << 5) | ((.v & 4) << 3) | ((.v & 8) << 1) | ((.v & 16) >> 1) | ((.v & 32) >> 3) | ((.v & 64) >> 5) | ((.v & 128) >> 7)
}

!macro address .v {
    !by <.v, >.v
}

!macro clear_screen .v, .addr {
    ldx #0
    lda #.v
-
    sta .addr + $0000, x
    sta .addr + $0100, x
    sta .addr + $0200, x
    sta .addr + $0300, x
    dex
    bne -
}

!macro wait .w {
    !if .w = 0 {
        ; do nothing
    } else {
        !if .w = 1 {
            !error "does not work for an input value of 1"
        } else {
            !if .w % 2 = 0 {
                !for .i, 0, .w / 2 - 1 {
                    nop
                }
            } else {
                !for .i, 0, (.w-3) / 2 - 1 {
                    nop
                }
                bit $ea
            }
        }
    }
}

!macro wait_even .w {
    !if .w % 2 = 0 {
        +wait .w
    } else {
        +wait .w + 1
    }
}

!macro wait_loop .w {
    !set .v = .w - 2 ; because of the ldy below
    !set .num_iters = (.v+1) / 5
    !set .rest = .v - ((.num_iters-1)* 5 + 4)

    !if .rest = 1 {
        !set .num_iters = .num_iters - 1
        !set .rest = .rest + 5
    }

    !if .num_iters > 255 {
        !error "loop to large"
    }

    !if .num_iters < 2 {
        +wait .w
    } else {
        ldy # .num_iters
-       ; here are (num_iters-1)*5 + 4 cycles
        dey
        bne -

        !set .rest = .v - ((.num_iters-1)* 5 + 4)
        +wait .rest
    }
}

RAM_ROM_SELECTION   = $01
RAM_ROM_DEFAULT     = %00110111
ALL_RAM_WITH_IO     = %00110101
ALL_RAM             = %00110100

!macro set .value, .addr {
    lda #.value
    sta .addr
}

!macro set16 .value, .addr {
    lda #<.value
    sta .addr
    lda #>.value
    sta .addr+1
}

!macro set16 .current, .value, .addr {
    lda #<.value
    sta .addr

    !if >.current != >.value {
        lda #>.value
        sta .addr+1
    } else {
        !warn "yeah"
    }
}

!macro copy .src, .dst {
    lda .src
    sta .dst
}

!macro copy_x .src, .dst {
    ldx .src
    stx .dst
}

!macro copy_y .src, .dst {
    ldy .src
    sty .dst
}

!macro inc16 .val {
    inc .val
    bcc +
    inc .val + 1
+
}

BPL_OPCODE = $10
BMI_OPCODE = $30
BCS_OPCODE = $b0
BCC_OPCODE = $90

!macro rsub .val {
    eor #$ff
    sec
    adc .val
}

;-------------------------------------------------------------------------------
; assert
;-------------------------------------------------------------------------------

!macro assert .value, .addr {
    lda .addr
    cmp #.value
    beq +
    jam
+
}
